diff -rupN original/server/src/lua.cc new/server/src/lua.cc
--- original/server/src/lua.cc	2014-05-31 11:17:09.000000000 +0200
+++ new/server/src/lua.cc	2014-10-01 23:33:47.440411571 +0200
@@ -19,6 +19,18 @@
 #include <unistd.h>
 #include <getopt.h>
 
+
+#include <l4/re/util/cap_alloc>
+#include <l4/re/util/object_registry>
+#include <l4/cxx/ipc_server>
+#include <l4/cxx/ipc_stream>
+
+#include <l4/dom0-main/ipc_protocol.h>
+#include <l4/dom0-main/communication_magic_numbers.h>
+
+#include <stdint.h>
+
+
 #ifdef USE_READLINE
 #include <readline/history.h>
 #include <readline/readline.h>
@@ -32,6 +44,83 @@ static Lua::Lib *_lua_init;
 extern char const _binary_ned_lua_start[];
 extern char const _binary_ned_lua_end[];
 
+
+
+lua_State *L;
+
+static L4Re::Util::Registry_server<> server;
+
+class Ned_server: public L4::Server_object
+{
+public:
+	int dispatch(l4_umword_t obj, L4::Ipc::Iostream &ios);
+
+private:
+	char buffer[256] =	{ '\0' };
+
+};
+
+int Ned_server::dispatch(l4_umword_t, L4::Ipc::Iostream &ios)
+{
+	l4_msgtag_t t;
+	ios >> t;
+
+	// We're only talking the dom0 LUA protocol
+	if (t.label() != Protocol::LuaDom0)
+		return -L4_EBADPROTO;
+
+	L4::Opcode opcode;
+
+	unsigned long int size = sizeof(buffer);
+
+	ios >> opcode;
+
+	switch (opcode)
+	{
+	case Opcode::executeLuaLine:
+		l4_uint8_t length;
+		ios >> length;
+
+		ios >> L4::Ipc::buf_cp_in<char>(buffer, size);
+
+		if(strlen(buffer)+1!=size)
+		{
+			printf("Didn't receive LUA string completely."
+					"Probably too long for UTCB-IPC, try splitting it up\n");
+			ios<<(int32_t)LUA_ERROR;
+			return L4_EOK;
+		}
+		ios<<(int32_t)LUA_OK;
+		printf("Received LUA over IPC: %s\n", buffer);
+		if (luaL_loadbuffer(L, buffer, strlen(buffer), "argument"))
+		{
+			fprintf(stderr, "lua couldn't parse '%s': %s.\n", buffer,
+					lua_tostring(L, -1));
+			lua_pop(L, 1);
+		}
+		else
+		{
+			if (lua_pcall(L, 0, 1, 0))
+			{
+				fprintf(stderr, "lua couldn't execute '%s': %s.\n", buffer,
+						lua_tostring(L, -1));
+				lua_pop(L, 1);
+			}
+			else
+				lua_pop(L, lua_gettop(L));
+		}
+
+		return L4_EOK;
+	default:
+		return -L4_ENOSYS;
+	}
+}
+
+
+
+
+
+
 Lua::Lib::Lib(Prio prio) : _prio(prio), _next(0)
 {
   Lib **f = &_lua_init;
@@ -60,9 +149,10 @@ static const luaL_Reg libs[] =
   { NULL, NULL }
 };
 
-static char const *const options = "+i";
+static char const *const options = "+is";
 static struct option const loptions[] =
 {{"interactive", 0, NULL, 'i' },
+ {"server", 0, NULL, 's' },
  {0, 0, 0, 0}};
 
 int lua(int argc, char const *const *argv)
@@ -71,6 +161,7 @@ int lua(int argc, char const *const *arg
   printf("Ned says: Hi World!\n");
 
   bool interactive = false;
+  bool ipcServer = false;
 
   if (argc < 2)
     interactive = true;
@@ -81,6 +172,7 @@ int lua(int argc, char const *const *arg
       switch (opt)
 	{
 	case 'i': interactive = true; break;
+	case 's': ipcServer = true; break;
 	default: break;
 	}
     }
@@ -89,7 +181,7 @@ int lua(int argc, char const *const *arg
   if (optind >= argc)
     interactive = true;
 
-  lua_State *L;
+  //lua_State *L;
 
   L = luaL_newstate();
 
@@ -134,6 +226,26 @@ int lua(int argc, char const *const *arg
       lua_pop(L, lua_gettop(L));
     }
 
+    if (ipcServer)
+    {
+      Ned_server neddy;
+      
+      //Register server
+      if (!server.registry()->register_obj(&neddy, "lua_ipc").is_valid())
+      {
+	printf(
+	  "Could not register my service, is there a 'ned_server' in the caps table?\n");
+	return 1;
+      }
+      
+      printf("Hello and welcome to the ned server!\n"
+      "I can interpret LUA.\n");
+      
+      // Wait for client requests
+      server.loop();
+    }
+    
+    
   lua_gc(L, LUA_GCCOLLECT, 0);
 
   if (!interactive)
